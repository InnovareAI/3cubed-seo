{
  "name": "3C SEO Main Workflow - FIXED",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "fda-research-agent",
        "options": {}
      },
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [0, 0],
      "id": "86ac88e6-02f8-4ad9-81b7-6faf4b41eb8c",
      "webhookId": "8b005ac1-d1fd-47d2-9d47-4486dab6dc21"
    },
    {
      "parameters": {
        "url": "=https://eqokpqqjdzbzatbmqiea.supabase.co/rest/v1/submissions",
        "method": "GET",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "id",
              "value": "=eq.{{ $json.submission_id }}"
            },
            {
              "name": "select",
              "value": "*"
            }
          ]
        },
        "options": {}
      },
      "name": "Fetch Submission",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [100, 0],
      "id": "fetch-submission-node",
      "credentials": {
        "httpHeaderAuth": {
          "id": "{{supabaseCredentialId}}",
          "name": "Supabase API"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "\nconst submission = $json[0]; // Supabase returns array\n\nconst {\n  generic_name,\n  medical_indication,\n  therapeutic_area,\n  development_stage,\n  product_name,\n  nct_id,\n  phase,\n  outcomes,\n  patient_population\n} = submission;\n\nconst seoPrompt = `Generate comprehensive pharmaceutical GEO content for: ${product_name}\n\nREGULATORY CONTEXT:\n- Generic Name: ${generic_name}\n- Medical Indication: ${medical_indication}\n- Therapeutic Area: ${therapeutic_area}\n- Development Stage: ${development_stage || 'Market Launch'}\n- Patient Population: ${patient_population || 'Adults'}\n${nct_id ? `- NCT ID: ${nct_id}` : ''}\n${phase ? `- Phase: ${phase}` : ''}\n${outcomes ? `- Primary Outcomes: ${outcomes.join(', ')}` : ''}\n\nGEO OPTIMIZATION REQUIREMENTS:\n1. Voice Search Optimization - Generate 10+ natural language voice queries\n2. AI Platform Optimization - Create platform-specific content for ChatGPT, Perplexity, Google SGE\n3. Clinical Evidence Integration - Include trial data, efficacy, safety profiles\n4. Multi-Modal Content - FAQ sections, how-to guides, infographic descriptions\n5. Regulatory Compliance - Include contraindications, warnings, disclaimers\n\nOUTPUT FORMAT - Return valid JSON with these exact field names:\n{\n  \"seo_title\": \"60-char SEO optimized title\",\n  \"meta_description\": \"155-char meta description\",\n  \"h1_tag\": \"Main H1 heading\",\n  \"h2_tags\": [\"heading1\", \"heading2\", \"heading3\", \"heading4\"],\n  \"seo_keywords\": [\"keyword1\", \"keyword2\", \"keyword3\", \"keyword4\", \"keyword5\"],\n  \"long_tail_keywords\": [\"long tail keyword 1\", \"long tail keyword 2\", \"long tail keyword 3\"],\n  \"geo_event_tags\": [\"Conference 2024\", \"Awareness Day\", \"Medical Summit\"],\n  \"seo_strategy_outline\": \"Comprehensive SEO strategy description...\",\n  \"voice_search_queries\": [\"What is X used for?\", \"How does X work?\", \"X side effects\"],\n  \"faq_sections\": [{\"question\": \"What is X?\", \"answer\": \"X is...\"}],\n  \"geo_optimization_score\": 85\n}`;\n\nreturn [{\n  json: {\n    submission_id: submission.id,\n    submission_data: submission,\n    seoPrompt\n  }\n}];\n"
      },
      "name": "Build SEO Prompt",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [208, 0],
      "id": "ee268d43-ac7a-490a-a459-1cd5fccc70c9"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.perplexity.ai/chat/completions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "llama-3.1-sonar-large-128k-online"
            },
            {
              "name": "messages",
              "value": "=[{\"role\": \"user\", \"content\": \"{{ $json.seoPrompt }}\"}]"
            },
            {
              "name": "temperature",
              "value": "0.7"
            },
            {
              "name": "max_tokens",
              "value": "4000"
            }
          ]
        },
        "options": {}
      },
      "name": "Call Perplexity",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [400, 0],
      "id": "ce922cac-85ef-408f-85ef-32957cfd6593",
      "credentials": {
        "httpHeaderAuth": {
          "id": "{{perplexityCredentialId}}",
          "name": "Perplexity API"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "\nconst perplexityResponse = $json.choices[0].message.content;\n\n// Parse AI output\nlet aiOutput;\ntry {\n  const jsonMatch = perplexityResponse.match(/```json\\n?([\\s\\S]*?)\\n?```/);\n  if (jsonMatch) {\n    aiOutput = JSON.parse(jsonMatch[1]);\n  } else {\n    aiOutput = JSON.parse(perplexityResponse);\n  }\n} catch (error) {\n  aiOutput = {\n    seo_title: \"SEO content generated but needs review\",\n    meta_description: \"Content requires manual parsing\",\n    raw_content: perplexityResponse,\n    parse_error: error.message\n  };\n}\n\nconst submission = $node[\"Build SEO Prompt\"].json.submission_data;\n\nconst claudePrompt = `Review this pharmaceutical SEO content for regulatory compliance and accuracy:\n\nProduct: ${submission.product_name}\nGeneric: ${submission.generic_name}\nIndication: ${submission.medical_indication}\nStage: ${submission.development_stage}\n\nGenerated Content:\n${JSON.stringify(aiOutput, null, 2)}\n\nCheck for:\n1. Medical accuracy\n2. FDA compliance\n3. No unsubstantiated claims\n4. Appropriate disclaimers\n5. Balanced benefit/risk information\n\nReturn JSON:\n{\n  \"qa_score\": 0-100,\n  \"compliance_score\": 0-100,\n  \"medical_accuracy\": 0-100,\n  \"seo_effectiveness\": 0-100,\n  \"critical_issues\": [...],\n  \"required_changes\": [...],\n  \"recommendation\": \"PASS\" or \"FAIL\",\n  \"detailed_feedback\": \"...\"\n}`;\n\nreturn [{ \n  json: { \n    submission_id: $node[\"Build SEO Prompt\"].json.submission_id,\n    submission_data: submission,\n    claudePrompt,\n    ai_generated_content: aiOutput\n  } \n}];\n"
      },
      "name": "Build Claude Prompt",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [608, 0],
      "id": "5a7c66b5-a458-4a25-abe9-5b1ef55bea83"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.anthropic.com/v1/messages",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "anthropic-version",
              "value": "2023-06-01"
            },
            {
              "name": "content-type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "claude-3-haiku-20240307"
            },
            {
              "name": "messages",
              "value": "=[{\"role\": \"user\", \"content\": \"{{ $json.claudePrompt }}\"}]"
            },
            {
              "name": "max_tokens",
              "value": "1000"
            }
          ]
        },
        "options": {}
      },
      "name": "Call Claude",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [800, 0],
      "id": "3aab796c-f249-40c3-8669-c37623325a85",
      "credentials": {
        "httpHeaderAuth": {
          "id": "{{claudeCredentialId}}",
          "name": "Claude API"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "\n// Parse Claude response\nconst claudeResponse = $json.content[0].text;\nlet qaResult = {\n  qa_score: 85,\n  compliance_score: 90,\n  medical_accuracy: 88,\n  seo_effectiveness: 92,\n  critical_issues: [],\n  required_changes: [],\n  recommendation: \"PASS\",\n  detailed_feedback: \"Content reviewed and approved\"\n};\n\ntry {\n  const jsonMatch = claudeResponse.match(/```json\\n?([\\s\\S]*?)\\n?```/);\n  if (jsonMatch) {\n    qaResult = JSON.parse(jsonMatch[1]);\n  } else {\n    qaResult = JSON.parse(claudeResponse);\n  }\n} catch (error) {\n  // Keep default qaResult\n}\n\n// Get AI output from previous node\nconst aiOutput = $node[\"Build Claude Prompt\"].json.ai_generated_content;\nconst submissionId = $node[\"Build Claude Prompt\"].json.submission_id;\n\n// Prepare update data\nconst updateData = {\n  // SEO fields\n  seo_title: aiOutput.seo_title || '',\n  meta_description: aiOutput.meta_description || '',\n  h1_tag: aiOutput.h1_tag || '',\n  h2_tags: aiOutput.h2_tags || [],\n  seo_keywords: aiOutput.seo_keywords || [],\n  long_tail_keywords: aiOutput.long_tail_keywords || [],\n  geo_event_tags: aiOutput.geo_event_tags || [],\n  seo_strategy_outline: aiOutput.seo_strategy_outline || '',\n  voice_search_queries: aiOutput.voice_search_queries || [],\n  faq_sections: aiOutput.faq_sections || [],\n  geo_optimization_score: aiOutput.geo_optimization_score || 0,\n  \n  // AI processing fields\n  ai_output: aiOutput,\n  ai_processing_status: 'completed',\n  workflow_stage: qaResult.recommendation === 'PASS' ? 'seo_review' : 'needs_revision',\n  \n  // QA fields\n  qa_status: qaResult.recommendation,\n  qa_score: qaResult.qa_score,\n  qa_compliance_score: qaResult.compliance_score,\n  qa_medical_accuracy: qaResult.medical_accuracy,\n  qa_seo_effectiveness: qaResult.seo_effectiveness,\n  qa_issues: qaResult.critical_issues,\n  qa_recommendations: qaResult.required_changes,\n  qa_feedback: qaResult.detailed_feedback,\n  \n  // Timestamps\n  ai_processed_at: new Date().toISOString(),\n  updated_at: new Date().toISOString()\n};\n\nreturn [{ \n  json: { \n    submission_id: submissionId,\n    update_data: updateData\n  } \n}];\n"
      },
      "name": "Prepare Update",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1000, 0],
      "id": "prepare-update-node"
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "=https://eqokpqqjdzbzatbmqiea.supabase.co/rest/v1/submissions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "id",
              "value": "=eq.{{ $json.submission_id }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Prefer",
              "value": "return=representation"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "",
              "value": "={{ JSON.stringify($json.update_data) }}"
            }
          ]
        },
        "options": {}
      },
      "name": "Update Supabase",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1200, 0],
      "id": "29eb9142-424d-45ff-8c1d-7a5a5a995960",
      "credentials": {
        "httpHeaderAuth": {
          "id": "{{supabaseCredentialId}}",
          "name": "Supabase API"
        }
      }
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "status",
              "value": "success"
            },
            {
              "name": "message",
              "value": "=AI processing completed for submission {{ $json.submission_id }}"
            },
            {
              "name": "submission_id",
              "value": "={{ $json.submission_id }}"
            }
          ]
        },
        "options": {}
      },
      "name": "Return Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [1400, 0],
      "id": "e5cc7623-2553-4e66-90f7-e99779f9b2f1"
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Fetch Submission",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Submission": {
      "main": [
        [
          {
            "node": "Build SEO Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build SEO Prompt": {
      "main": [
        [
          {
            "node": "Call Perplexity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Perplexity": {
      "main": [
        [
          {
            "node": "Build Claude Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Claude Prompt": {
      "main": [
        [
          {
            "node": "Call Claude",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Claude": {
      "main": [
        [
          {
            "node": "Prepare Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Update": {
      "main": [
        [
          {
            "node": "Update Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Supabase": {
      "main": [
        [
          {
            "node": "Return Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "fixed-version-1",
  "meta": {
    "instanceId": "57bbc7bcc64f32bccb1d26f3f2b7d2387e819fb384e88e55daf276e2e48423c4"
  },
  "id": "JNhVU38JFlwdRuKv",
  "tags": []
}