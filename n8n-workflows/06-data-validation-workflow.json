{
  "name": "Advanced Data Validation & Sanitization",
  "nodes": [
    {
      "parameters": {
        "jsCode": "// Comprehensive Pharmaceutical Data Validation Engine\nconst submissions = items.map(item => item.json);\nconst validationResults = [];\n\nfor (const submission of submissions) {\n  const validation = {\n    submission_id: submission.id,\n    validation_timestamp: new Date().toISOString(),\n    validation_rules_applied: [],\n    errors: [],\n    warnings: [],\n    sanitization_actions: [],\n    data_quality_score: 100,\n    compliance_flags: [],\n    enrichment_suggestions: []\n  };\n\n  // Required Fields Validation\n  const requiredFields = ['product_name', 'therapeutic_area', 'indication', 'submitter_email'];\n  requiredFields.forEach(field => {\n    if (!submission[field] || submission[field].trim() === '') {\n      validation.errors.push(`Missing required field: ${field}`);\n      validation.data_quality_score -= 15;\n    }\n  });\n\n  // Email Validation\n  if (submission.submitter_email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(submission.submitter_email)) {\n      validation.errors.push('Invalid email format');\n      validation.data_quality_score -= 10;\n    }\n  }\n\n  // Product Name Validation\n  if (submission.product_name) {\n    // Check for prohibited characters\n    const prohibitedChars = ['<', '>', '&', '\"', \"'\"];\n    prohibitedChars.forEach(char => {\n      if (submission.product_name.includes(char)) {\n        validation.sanitization_actions.push(`Remove prohibited character: ${char}`);\n        submission.product_name = submission.product_name.replace(new RegExp(char, 'g'), '');\n      }\n    });\n\n    // Check length\n    if (submission.product_name.length > 100) {\n      validation.warnings.push('Product name exceeds recommended length (100 characters)');\n      validation.data_quality_score -= 5;\n    }\n  }\n\n  // Therapeutic Area Validation\n  const validTherapeuticAreas = [\n    'Oncology', 'Cardiology', 'Neurology', 'Immunology', 'Endocrinology',\n    'Gastroenterology', 'Respiratory', 'Dermatology', 'Ophthalmology', 'Rare Disease'\n  ];\n  if (submission.therapeutic_area && !validTherapeuticAreas.includes(submission.therapeutic_area)) {\n    validation.warnings.push(`Therapeutic area '${submission.therapeutic_area}' not in standard list`);\n    validation.enrichment_suggestions.push('Consider standardizing therapeutic area');\n  }\n\n  // Medical Content Validation\n  if (submission.ai_generated_content) {\n    // Check for prohibited claims\n    const prohibitedClaims = ['cure', 'guarantee', 'miracle', 'breakthrough', 'revolutionary'];\n    const contentLower = submission.ai_generated_content.toLowerCase();\n    \n    prohibitedClaims.forEach(claim => {\n      if (contentLower.includes(claim)) {\n        validation.compliance_flags.push(`Prohibited claim detected: '${claim}'`);\n        validation.data_quality_score -= 20;\n      }\n    });\n\n    // Check for required disclaimers\n    const requiredDisclaimers = ['Important Safety Information', 'Please see full Prescribing Information'];\n    const hasDisclaimers = requiredDisclaimers.some(disclaimer => \n      submission.ai_generated_content.includes(disclaimer)\n    );\n    \n    if (!hasDisclaimers && submission.therapeutic_area === 'Oncology') {\n      validation.compliance_flags.push('Missing required safety disclaimers for oncology product');\n      validation.data_quality_score -= 15;\n    }\n  }\n\n  // Mechanism of Action Validation\n  if (submission.mechanism_of_action) {\n    const scientificTerms = ['receptor', 'enzyme', 'pathway', 'inhibitor', 'agonist', 'antagonist'];\n    const hasScientificTerms = scientificTerms.some(term => \n      submission.mechanism_of_action.toLowerCase().includes(term)\n    );\n    \n    if (!hasScientificTerms) {\n      validation.warnings.push('Mechanism of action may need more scientific detail');\n      validation.enrichment_suggestions.push('Add specific molecular target information');\n    }\n  }\n\n  // Priority Level Validation\n  const validPriorityLevels = ['low', 'medium', 'high', 'urgent'];\n  if (submission.priority_level && !validPriorityLevels.includes(submission.priority_level)) {\n    validation.sanitization_actions.push('Normalize priority level to standard values');\n    submission.priority_level = 'medium'; // Default value\n  }\n\n  // Data Enrichment Opportunities\n  if (!submission.nct_number && submission.clinical_trials) {\n    validation.enrichment_suggestions.push('Extract NCT numbers from clinical trials text');\n  }\n\n  if (!submission.geographic_markets) {\n    validation.enrichment_suggestions.push('Add target geographic markets');\n  }\n\n  // Duplicate Detection\n  const duplicateCheck = submissions.filter(s => \n    s.id !== submission.id && \n    s.product_name === submission.product_name &&\n    s.therapeutic_area === submission.therapeutic_area\n  );\n  \n  if (duplicateCheck.length > 0) {\n    validation.warnings.push(`Potential duplicate detected with submission ${duplicateCheck[0].id}`);\n    validation.data_quality_score -= 10;\n  }\n\n  // Final Data Quality Assessment\n  if (validation.data_quality_score >= 90) {\n    validation.quality_grade = 'A';\n    validation.recommendation = 'Ready for processing';\n  } else if (validation.data_quality_score >= 75) {\n    validation.quality_grade = 'B';\n    validation.recommendation = 'Minor improvements recommended';\n  } else if (validation.data_quality_score >= 60) {\n    validation.quality_grade = 'C';\n    validation.recommendation = 'Significant improvements required';\n  } else {\n    validation.quality_grade = 'F';\n    validation.recommendation = 'Reject - major data quality issues';\n  }\n\n  validationResults.push(validation);\n}\n\nreturn validationResults.map(result => ({ json: result }));"
      },
      "id": "data-validator",
      "name": "Pharmaceutical Data Validator",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [400, 300]
    }
  ]
}