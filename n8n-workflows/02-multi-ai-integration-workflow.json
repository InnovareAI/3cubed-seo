{
  "name": "Multi-AI Integration Workflow",
  "nodes": [
    {
      "parameters": {
        "model": "biogpt",
        "endpoint": "https://api.microsoft.com/cognitive/biogpt/v1/completions",
        "prompt": "=Analyze this pharmaceutical compound for medical accuracy:\n\nProduct: {{ $json.product_name }}\nMechanism: {{ $json.mechanism_of_action }}\nIndication: {{ $json.indication }}\n\nProvide:\n1. Medical accuracy score (0-100)\n2. Potential drug interactions\n3. Contraindications\n4. Clinical evidence assessment",
        "options": {
          "maxTokens": 2000,
          "temperature": 0.1
        }
      },
      "id": "biogpt-medical-analyzer",
      "name": "BioGPT Medical Analyzer",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [400, 200]
    },
    {
      "parameters": {
        "model": "scibert",
      "endpoint": "https://api.huggingface.co/models/allenai/scibert_scivocab_uncased",
        "text": "={{ $json.ai_generated_content }}",
        "task": "scientific-text-analysis",
        "options": {
          "return_confidence": true,
          "return_entities": true
        }
      },
      "id": "scibert-analyzer",
      "name": "SciBERT Scientific Text Analyzer", 
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [400, 400]
    },
    {
      "parameters": {
        "model": "gemini-pro",
        "prompt": "=As a pharmaceutical regulatory expert, review this content:\n\n{{ $json.ai_generated_content }}\n\nEvaluate:\n1. FDA compliance score\n2. Risk assessment\n3. Required disclaimers\n4. Promotional review readiness",
        "generationConfig": {
          "temperature": 0.2,
          "topP": 0.8,
          "maxOutputTokens": 2000
        }
      },
      "id": "gemini-compliance",
      "name": "Gemini Compliance Reviewer",
      "type": "n8n-nodes-base.googlePalm",
      "typeVersion": 1,
      "position": [400, 600],
      "credentials": {
        "googlePalmApi": {
          "id": "google-palm-creds",
          "name": "Google PaLM API"
        }
      }
    },
    {
      "parameters": {
        "deploymentName": "gpt-4-medical",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "You are a medical AI specialist trained on pharmaceutical databases. Provide expert medical analysis."
            },
            {
              "role": "user",
              "content": "=Perform medical review of: {{ $json.product_name }} for {{ $json.indication }}"
            }
          ]
        },
        "options": {
          "maxTokens": 3000,
          "temperature": 0.15
        }
      },
      "id": "azure-openai-medical",
      "name": "Azure OpenAI Medical Review",
      "type": "n8n-nodes-base.microsoftAzureOpenAi",
      "typeVersion": 1,
      "position": [400, 800],
      "credentials": {
        "microsoftAzureOpenAiApi": {
          "id": "azure-openai-creds",
          "name": "Azure OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Advanced AI Orchestration Engine\nconst submission = items[0].json;\n\n// Define AI provider capabilities and scoring\nconst aiProviders = {\n  claude: {\n    strengths: ['regulatory_compliance', 'content_generation', 'safety_analysis'],\n    medical_accuracy: 0.92,\n    regulatory_knowledge: 0.95,\n    cost_per_token: 0.008\n  },\n  gpt4: {\n    strengths: ['general_medical', 'drug_interactions', 'clinical_analysis'], \n    medical_accuracy: 0.89,\n    regulatory_knowledge: 0.85,\n    cost_per_token: 0.01\n  },\n  biogpt: {\n    strengths: ['biomedical_text', 'drug_mechanisms', 'medical_entities'],\n    medical_accuracy: 0.94,\n    regulatory_knowledge: 0.75,\n    cost_per_token: 0.005\n  },\n  scibert: {\n    strengths: ['scientific_analysis', 'literature_review', 'evidence_assessment'],\n    medical_accuracy: 0.91,\n    regulatory_knowledge: 0.70,\n    cost_per_token: 0.003\n  },\n  gemini: {\n    strengths: ['multimodal_analysis', 'reasoning', 'fact_checking'],\n    medical_accuracy: 0.87,\n    regulatory_knowledge: 0.88,\n    cost_per_token: 0.006\n  }\n};\n\n// Complexity scoring algorithm\nfunction calculateComplexity(submission) {\n  let complexity = 0;\n  \n  // Therapeutic area complexity\n  const therapeuticComplexity = {\n    'Oncology': 0.9,\n    'Neurology': 0.85,\n    'Cardiology': 0.8,\n    'Immunology': 0.85,\n    'Rare Disease': 0.95,\n    'Primary Care': 0.6\n  };\n  \n  complexity += (therapeuticComplexity[submission.therapeutic_area] || 0.7) * 0.3;\n  \n  // Mechanism complexity\n  if (submission.mechanism_of_action?.includes('novel') || \n      submission.mechanism_of_action?.includes('first-in-class')) {\n    complexity += 0.2;\n  }\n  \n  // Regulatory status complexity\n  if (submission.development_stage === 'Phase III' || \n      submission.development_stage === 'Pre-approval') {\n    complexity += 0.15;\n  }\n  \n  // Content length complexity\n  const contentLength = (submission.ai_generated_content?.length || 0);\n  if (contentLength > 2000) complexity += 0.1;\n  if (contentLength > 5000) complexity += 0.15;\n  \n  return Math.min(complexity, 1.0);\n}\n\n// AI provider selection algorithm\nfunction selectOptimalAI(submission, complexity) {\n  const requirements = {\n    regulatory_focus: submission.priority_level === 'high' || \n                     submission.therapeutic_area === 'Oncology',\n    medical_accuracy_critical: complexity > 0.8,\n    cost_sensitive: submission.priority_level === 'low',\n    multimodal_needed: submission.has_images || submission.has_charts\n  };\n  \n  let scores = {};\n  \n  Object.keys(aiProviders).forEach(provider => {\n    const ai = aiProviders[provider];\n    let score = 0;\n    \n    // Base capability score\n    score += ai.medical_accuracy * 0.4;\n    score += ai.regulatory_knowledge * 0.3;\n    \n    // Requirement-specific bonuses\n    if (requirements.regulatory_focus && \n        ai.strengths.includes('regulatory_compliance')) {\n      score += 0.2;\n    }\n    \n    if (requirements.medical_accuracy_critical && \n        ai.medical_accuracy > 0.9) {\n      score += 0.15;\n    }\n    \n    if (requirements.cost_sensitive) {\n      score += (0.01 - ai.cost_per_token) * 10; // Favor lower cost\n    }\n    \n    // Complexity-based adjustments\n    if (complexity > 0.8 && ai.strengths.includes('clinical_analysis')) {\n      score += 0.1;\n    }\n    \n    scores[provider] = score;\n  });\n  \n  // Return top 3 providers for consensus\n  const ranked = Object.entries(scores)\n    .sort(([,a], [,b]) => b - a)\n    .slice(0, 3)\n    .map(([provider, score]) => ({ provider, score }));\n  \n  return ranked;\n}\n\n// Execute orchestration\nconst complexity = calculateComplexity(submission);\nconst selectedAIs = selectOptimalAI(submission, complexity);\n\n// Create execution plan\nconst executionPlan = {\n  primary_ai: selectedAIs[0].provider,\n  secondary_ai: selectedAIs[1].provider,\n  tertiary_ai: selectedAIs[2].provider,\n  complexity_score: complexity,\n  estimated_cost: selectedAIs.reduce((sum, ai) => \n    sum + (aiProviders[ai.provider].cost_per_token * 1000), 0),\n  processing_strategy: complexity > 0.8 ? 'sequential_validation' : 'parallel_processing',\n  quality_gates: {\n    consensus_threshold: complexity > 0.8 ? 0.85 : 0.75,\n    min_medical_accuracy: 0.9,\n    max_cost_threshold: 0.05\n  }\n};\n\nreturn [{\n  json: {\n    ...submission,\n    ai_orchestration: executionPlan,\n    orchestration_timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "ai-orchestration-engine",
      "name": "AI Orchestration Engine",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [700, 400]
    }
  ],
  "connections": {
    "BioGPT Medical Analyzer": {
      "main": [
        [
          {
            "node": "AI Orchestration Engine",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}